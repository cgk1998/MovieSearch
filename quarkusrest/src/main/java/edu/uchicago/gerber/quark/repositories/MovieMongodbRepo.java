package edu.uchicago.gerber.quark.repositories;


import com.mongodb.client.result.UpdateResult;
import com.mongodb.client.model.UpdateOptions;
import com.mongodb.client.model.Updates;
import com.github.javafaker.Faker;
import com.mongodb.BasicDBObject;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.result.DeleteResult;
import edu.uchicago.gerber.quark.models.Movie;
import io.quarkus.runtime.StartupEvent;
import org.bson.Document;
import org.bson.types.ObjectId;
import static com.mongodb.client.model.Filters.eq;
import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.event.Observes;
import javax.inject.Inject;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import com.mongodb.MongoException;


@ApplicationScoped
public class MovieMongodbRepo {

    @Inject
    MongoClient mongoClient;

    public final int PAGE_SIZE = 10;
    //id is auto-generated by mongodb
    public static final String TITLE_COL = "title";
    public static final String EMAIL_COL = "email";
    public static final String YEAR_COL = "year";
    public static final String POSTER_COL = "poster";
    public static final String IMDB_COL = "imdb";
    public static final String COMMENT_COL = "comment";


    public List<Movie> findAll() {

        List<Movie> list = new ArrayList<>();
        //this is the try-with-resources syntax from Java7
        try (MongoCursor<Document> cursor = getCollection().find().iterator()) {
            while (cursor.hasNext()) {
                Document document = cursor.next();
                Movie mov = new Movie();
                mov.setId(document.getObjectId("_id").toHexString());
                mov.setTitle(document.getString(TITLE_COL));
                mov.setEmail(document.getString(EMAIL_COL));
                mov.setYear(document.getString(YEAR_COL));
                mov.setPoster(document.getString(POSTER_COL));
                mov.setImdbID(document.getString(IMDB_COL));
                mov.setComment(document.getString(COMMENT_COL));

                list.add(mov);
            }
        }
        return list;
    }


    public List<Movie> add(Movie stud) {
        Document document = new Document()
                .append(TITLE_COL, stud.getTitle())
                .append(EMAIL_COL, stud.getEmail())
                .append(YEAR_COL, stud.getYear())
                .append(POSTER_COL, stud.getPoster())
                .append(COMMENT_COL, stud.getComment())
                .append(IMDB_COL, stud.getImdbID());
        getCollection().insertOne(document);
        return findAll();
    }


    public Movie get(String id) {

        BasicDBObject query = new BasicDBObject();
        query.put("_id", new ObjectId(id));

        FindIterable<Document> documents = getCollection().find(query);

        List<Movie> movies = new ArrayList<>();
        for (Document document : documents) {
            movies.add(transform(document));
        }

        //this will produce a 404 not found
        if (movies.size() != 1) return null;

        return movies.get(0);
    }


    public List<Movie> getByEmail(String email) {

        BasicDBObject query = new BasicDBObject();
        query.put(EMAIL_COL, email);

        FindIterable<Document> documents = getCollection().find(query);

        List<Movie> movies = new ArrayList<>();
        for (Document document : documents) {
            movies.add(transform(document));
        }

        //this will produce a 404 not found


        return movies;
    }

    public List<Movie> getByTitle(String title) {

        BasicDBObject query = new BasicDBObject();
        query.put(TITLE_COL, title);

        FindIterable<Document> documents = getCollection().find(query);

        List<Movie> movies = new ArrayList<>();
        for (Document document : documents) {
            movies.add(transform(document));
        }

        //this will produce a 404 not found


        return movies;
    }



    public List<Movie> paged(int pageNumber) {

        List<Movie> list = new ArrayList<>();
        try {
            MongoCursor<Document> cursor = getCollection().find().skip(PAGE_SIZE * (pageNumber - 1)).limit(PAGE_SIZE).iterator();
            while (cursor.hasNext()) {
                Document document = cursor.next();
                list.add(transform(document));
            }
            cursor.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    public List<Movie> delete(String id){
        org.bson.conversions.Bson query = eq("_id", new ObjectId(id));
        try {
            DeleteResult result = getCollection().deleteOne(query);
            System.out.println("Deleted document count: " + result.getDeletedCount());
            if (result.getDeletedCount() == 0){
                return null;
            }
        } catch (MongoException me) {
            System.err.println("Unable to delete due to an error: " + me);
        }
        return findAll();
    }

    public List<Movie> update(String id, Movie stud){

        Document query = new Document().append("_id",  new ObjectId(id));

        org.bson.conversions.Bson updateDoc= new Document();

        if (stud.getComment() != "") {
            System.out.println("jere");
            updateDoc = Updates.combine(updateDoc,  Updates.set(COMMENT_COL, stud.getComment()));
        }

//        if (stud.getUniversity() != "") {
//            updateDoc = Updates.combine(updateDoc,  Updates.set(STUDENT_UNIVERSITY_COL, stud.getUniversity()));
//        }

        UpdateOptions options = new UpdateOptions().upsert(true);

        try {
            UpdateResult result = getCollection().updateOne(query, updateDoc, options);
            System.out.println("Modified document count: " + result.getModifiedCount());
            if (result.getModifiedCount() == 0) {
                return null;
            }
            System.out.println("Upserted id: " + result.getUpsertedId()); // only contains a value when an upsert is performed
        } catch (MongoException me) {
            System.err.println("Unable to update due to an error: " + me);
        }

        return findAll();
    }

    //for mongo
    private Movie transform(org.bson.Document document) {
        Movie stud = new Movie();
        if (document != null && !document.isEmpty()) {

            stud.setId(document.getObjectId("_id").toHexString());
            stud.setTitle(document.getString(TITLE_COL));
            stud.setEmail(document.getString(EMAIL_COL));
            stud.setYear(document.getString(YEAR_COL));
            stud.setPoster(document.getString(POSTER_COL));
            stud.setImdbID(document.getString(IMDB_COL));
            stud.setComment(document.getString(COMMENT_COL));

        }
        return stud;

    }


    private MongoCollection getCollection() {
        return mongoClient.getDatabase("movies_db").getCollection("movies_collection");
    }

}
